{"version":3,"sources":["images/default.png","components/Header.jsx","components/Gallery.jsx","pages/Home.jsx","helper.jsx","pages/Profile.jsx","pages/Login.jsx","components/UserCard.jsx","pages/Users.jsx","routes.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","state","currentUserData","currentUser","reactLocalStorage","get","allUserData","getObject","this","setState","props","setCurrentUserData","setAllUserData","window","location","href","set","className","to","onClick","logout","React","PureComponent","Gallery","items","length","map","photo","key","id","style","backgroundImage","url","DefaultImage","Home","uploadPhoto","bind","event","_this","blobData","callback","reader","FileReader","readAsDataURL","onloadend","base64data","result","FileRead","target","files","base64Data","photos","push","setObject","type","onChange","Profile","selectedUserData","selectedUserId","match","params","find","user","parseInt","userName","UserData","password","Login","newUserName","newPassword","newConfirmPassword","isRegistered","login","validateFields","register","onEnterKey","showError","Object","entries","fieldArr","i","loggedInUser","toLowerCase","trim","errorMessage","setTimeout","value","onKeyPress","e","prevState","UserCard","userData","profileImage","Users","Routes","path","exact","component","App","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f20223e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.3cb22185.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { reactLocalStorage } from 'reactjs-localstorage';\n\nclass Header extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      currentUserData: [],\n    };\n  }\n\n  componentWillMount() {\n    const currentUser = reactLocalStorage.get('userId');\n    const allUserData = reactLocalStorage.getObject('allUserData');\n    if (currentUser) {\n      this.setState({\n        currentUserData: allUserData[currentUser],\n      });\n      if (this.props.setCurrentUserData) {\n        this.props.setCurrentUserData(allUserData[currentUser]);\n      }\n      if (this.props.setAllUserData) {\n        this.props.setAllUserData(allUserData);\n      }\n    } else {\n      // redirect to login\n      window.location.href = '/';\n    }\n  }\n\n  logout() {\n    // reset user id in local storage\n    reactLocalStorage.set('userId', '');\n  }\n\n  render() {\n    return (\n      <div className=\"header-container\">\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/home\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n            <li>\n              <Link to=\"/\" onClick={this.logout}>Logout</Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport DefaultImage from '../images/default.png';\n\nconst Gallery = ({ items }) => (\n  <div>\n    {\n            !!items && !!items.length\n              ? items.map((photo) => (\n                <div\n                  key={`image${photo.id}`}\n                  className=\"image-gallery\"\n                  style={{ backgroundImage: `url(${photo.url})` }}\n                />\n              ))\n              : (\n                <div\n                  key=\"default-image\"\n                  className=\"image-gallery\"\n                  style={{ backgroundImage: `url(${DefaultImage})` }}\n                />\n              )\n\n        }\n  </div>\n);\n\nexport default Gallery;\n","import React from 'react';\nimport { reactLocalStorage } from 'reactjs-localstorage';\nimport { FileRead } from '../helper';\nimport Header from '../components/Header';\nimport Gallery from '../components/Gallery';\n\nclass Home extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      currentUserData: {},\n    };\n    this.uploadPhoto = this.uploadPhoto.bind(this);\n    this.setCurrentUserData = this.setCurrentUserData.bind(this);\n  }\n\n  setCurrentUserData(currentUserData) {\n    this.setState({ currentUserData });\n  }\n\n  uploadPhoto(event) {\n    let { currentUserData } = this.state;\n    currentUserData = { ...currentUserData };\n\n    // read file and save to local storage\n    const _this = this;\n    FileRead(event.target.files[0], (base64Data) => {\n      currentUserData.photos.push({\n        id: currentUserData.photos.length ? currentUserData.photos.length : 0,\n        url: base64Data,\n      });\n\n      // set in local state\n      _this.setState({\n        currentUserData,\n      });\n\n      // set in local storage\n      const allUserData = reactLocalStorage.getObject('allUserData');\n      allUserData[currentUserData.id] = currentUserData;\n      reactLocalStorage.setObject('allUserData', allUserData);\n    });\n  }\n\n  render() {\n    const { currentUserData } = this.state;\n    return (\n      <div className=\"home-container\">\n        <Header setCurrentUserData={this.setCurrentUserData} />\n        <br />\n        <h2>My profile</h2>\n        <div className=\"btn upload-button-container\">\n          <span>Upload</span>\n          <input type=\"file\" onChange={this.uploadPhoto} />\n        </div>\n\n        <div>\n          <Gallery items={currentUserData.photos} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/* This file contains helper methods */\n\nexport const FileRead = function (blobData, callback = null) {\n  const reader = new FileReader();\n  reader.readAsDataURL(blobData);\n  reader.onloadend = function () {\n    const base64data = reader.result;\n    if (callback) { callback(base64data); }\n  };\n};\n","import React from 'react';\nimport Header from '../components/Header';\nimport Gallery from '../components/Gallery';\n\nclass Profile extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      selectedUserData: {},\n    };\n    this.setAllUserData = this.setAllUserData.bind(this);\n  }\n\n  setAllUserData(allUserData) {\n    const selectedUserId = this.props.match.params.id;\n    const selectedUserData = allUserData.find((user) => user.id === parseInt(selectedUserId, 0));\n    this.setState({ selectedUserData });\n  }\n\n  render() {\n    const { selectedUserData } = this.state;\n    return (\n      <div>\n        <Header setAllUserData={this.setAllUserData} />\n        {\n                    !!selectedUserData\n                    && (\n                    <div className=\"selected-user-details\">\n                      <h2>{selectedUserData.userName}</h2>\n                      <Gallery items={selectedUserData.photos} />\n                    </div>\n                    )\n                }\n      </div>\n    );\n  }\n}\n\nexport default Profile;\n","import React from 'react';\nimport { reactLocalStorage } from 'reactjs-localstorage';\n\nconst UserData = [\n  {\n    id: 0,\n    userName: 'Jack',\n    password: 'developer7',\n    photos: [],\n  }, {\n    id: 1,\n    userName: 'Jameson',\n    password: 'developer10',\n    photos: [],\n  }, {\n    id: 2,\n    userName: 'Jim',\n    password: 'developer107',\n    photos: [],\n  },\n];\n\nclass Login extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      userName: '',\n      password: '',\n      newUserName: '',\n      newPassword: '',\n      newConfirmPassword: '',\n      isRegistered: true,\n    };\n    this.login = this.login.bind(this);\n    this.validateFields = this.validateFields.bind(this);\n    this.register = this.register.bind(this);\n    this.onEnterKey = this.onEnterKey.bind(this);\n    this.showError = this.showError.bind(this);\n  }\n\n  componentWillMount() {\n    if (!Object.entries(reactLocalStorage.getObject('allUserData')).length) {\n      reactLocalStorage.setObject('allUserData', UserData);\n    }\n    if (reactLocalStorage.get('userId')) {\n      window.location.href = '/home';\n    }\n  }\n\n  validateFields(fieldArr) {\n    let result = true;\n    for (let i = 0; i < fieldArr.length; i++) {\n      if (!fieldArr[i]) {\n        result = false;\n      }\n    }\n    return result;\n  }\n\n  login() {\n    const { userName, password } = this.state;\n    const isValid = this.validateFields([userName, password]);\n    if (isValid) {\n      const allUserData = reactLocalStorage.getObject('allUserData');\n      const loggedInUser = allUserData.find((user) => user.userName.toLowerCase() === userName.trim().toLowerCase());\n      const isAuthorizedUser = !!loggedInUser && !!Object.entries(loggedInUser).length;\n      const isAuthenticatedUser = isAuthorizedUser && loggedInUser.password === password;\n      if (isAuthenticatedUser) {\n        reactLocalStorage.setObject('userId', loggedInUser.id);\n        window.location.href = '/home';\n      } else {\n        // invalid user\n        this.showError('Username or password incorrect!!');\n\n        // reset user data\n        this.setState({\n          userName: '',\n          password: '',\n        });\n      }\n    } else {\n      this.showError();\n    }\n  }\n\n  register() {\n    const { newUserName, newPassword, newConfirmPassword } = this.state;\n    const isValid = this.validateFields([newUserName, newPassword, newConfirmPassword]);\n    if (isValid) {\n      const allUserData = reactLocalStorage.getObject('allUserData');\n      allUserData.push({\n        id: allUserData.length,\n        userName: newUserName.trim(),\n        password: newPassword,\n        photos: [],\n      });\n      reactLocalStorage.setObject('allUserData', allUserData);\n      this.setState({\n        newUserName: '',\n        newPassword: '',\n        newConfirmPassword: '',\n        isRegistered: true,\n      });\n    } else if (newPassword !== newConfirmPassword) {\n      this.showError('Passwords do not match!');\n    } else {\n      this.showError();\n    }\n  }\n\n  onEnterKey(event) {\n    if (event.key === 'Enter') {\n      const { isRegistered } = this.state;\n      if (isRegistered) {\n        this.login();\n      } else {\n        this.register();\n      }\n    }\n  }\n\n  showError(errorMessage = 'All fields are required!!') {\n    this.setState({\n      errorMessage,\n    }, function () {\n      const _this = this;\n      setTimeout(() => {\n        _this.setState({\n          errorMessage: '',\n        });\n      }, 5000);\n    });\n  }\n\n  render() {\n    const {\n      userName, password, newUserName, newPassword, newConfirmPassword, isRegistered, errorMessage,\n    } = this.state;\n    return (\n      <div>\n        <div className=\"login-container\">\n          {\n                        isRegistered\n                          ? ([\n                            <div className=\"login-input-label\" key=\"username\">\nUser Name:\n                              <input\n                                value={userName}\n                                onKeyPress={this.onEnterKey}\n                                onChange={(e) => this.setState({ userName: e.target.value })}\n                              />\n                            </div>,\n                            <div className=\"login-input-label\" key=\"password\">\nPassword:\n                              <input\n                                type=\"password\"\n                                onKeyPress={this.onEnterKey}\n                                value={password}\n                                onChange={(e) => this.setState({ password: e.target.value })}\n                              />\n                            </div>,\n                            <div className=\"btn\" key=\"login\" onClick={this.login}>Login</div>,\n                          ])\n                          : ([\n                            <div className=\"login-input-label\" key=\"newUsername\">\nUser Name:\n                              <input\n                                value={newUserName}\n                                onKeyPress={this.onEnterKey}\n                                onChange={(e) => this.setState({ newUserName: e.target.value })}\n                              />\n                            </div>,\n                            <div className=\"login-input-label\" key=\"newPassword\">\nPassword:\n                              <input\n                                type=\"password\"\n                                value={newPassword}\n                                onKeyPress={this.onEnterKey}\n                                onChange={(e) => this.setState({ newPassword: e.target.value })}\n                              />\n                            </div>,\n                            <div className=\"login-input-label\" key=\"newConfirmPassword\">\nConfirm Password:\n                              <input\n                                type=\"password\"\n                                value={newConfirmPassword}\n                                onKeyPress={this.onEnterKey}\n                                onChange={(e) => this.setState({ newConfirmPassword: e.target.value })}\n                              />\n                            </div>,\n\n                            <div className=\"btn\" onClick={this.register} key=\"register\">Register</div>,\n                          ])\n\n                    }\n          <small onClick={() => {\n            this.setState((prevState) => ({\n              isRegistered: !prevState.isRegistered,\n            }));\n          }}\n          >\n            <span>{isRegistered ? 'New User?' : 'Go to login'}</span>\n          </small>\n          {!!errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n        </div>\n        <span>NOTE:</span>\n        <br />\n        <small>* Details of newly registered user will be removed on clearing local storage.</small>\n        <br />\n        <small>* Uploaded photos for all users will be removed on clearing local storage.</small>\n      </div>\n\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport DefaultImage from '../images/default.png';\n\nconst UserCard = ({ userData }) => {\n  const profileImage = userData.photos[0] ? userData.photos[0].url : DefaultImage;\n  const redirectToUserPage = () => {\n    window.location.href = `/profile/${userData.id}`;\n  };\n  return (\n    <div className=\"user-card\" onClick={redirectToUserPage}>\n      <div className=\"user-card-icon\" style={{ backgroundImage: `url(${profileImage})` }} />\n      <div className=\"user-card-name\">{userData.userName}</div>\n    </div>\n  );\n};\n\nexport default UserCard;\n","import React from 'react';\nimport UserCard from '../components/UserCard';\nimport Header from '../components/Header';\n\nclass Users extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      allUserData: [],\n    };\n    this.setAllUserData = this.setAllUserData.bind(this);\n  }\n\n  setAllUserData(allUserData) {\n    this.setState({ allUserData });\n  }\n\n  render() {\n    const { allUserData } = this.state;\n    return (\n      <div>\n        <Header setAllUserData={this.setAllUserData} />\n        <br />\n        <h2>All users</h2>\n        {\n                    !!allUserData && allUserData.map((user) => (<UserCard key={`user${user.id}`} userData={user} />))\n                }\n      </div>\n    );\n  }\n}\n\nexport default Users;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Profile from './pages/Profile';\nimport Login from './pages/Login';\nimport Users from './pages/Users';\n\n\nclass Routes extends React.PureComponent {\n  render() {\n    return (\n      <div>\n        <Router>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/home\" component={Home} />\n          <Route path=\"/profile/:id\" component={Profile} />\n          <Route path=\"/users\" component={Users} />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default Routes;\n","import React from 'react';\nimport Routes from './routes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/css/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}